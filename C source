// Built with SFML 2.5.1.
// SFML webpage: https://www.sfml-dev.org

// Given a list of symbols and a maximum of two leafs prints the coresponding binary tree
// Example input:
//     v[1][3]![2]PQ

#include <SFML/Graphics.hpp>
#include <Windows.h>
#include <direct.h>
#include <iostream>

sf::Vector2f unit(20.0, 20.0);
sf::Font font;
char fontAds[256];

struct Node
{
	char symbol = 0;
	int leaf1 = -1, leaf2 = -1;
	sf::CircleShape circle;
	sf::Text symbText;

	void contsruct(const char s, const int l1, const  int l2, const sf::Vector2f pos)
	{
		symbol = s;
		leaf1 = l1;
		leaf2 = l2;

		symbText.setString(std::string(1, s));
		symbText.setFont(font);
		symbText.setFillColor(sf::Color::Black);

		circle.setRadius(20.0);
		circle.setPointCount(20);
		circle.setOutlineThickness(2.0);

		if (s == '!' || s == '^' || s == 'v' || s == '>' || s == '=')
		{
			circle.setFillColor(sf::Color(0, 0, 255, 255));
			circle.setOutlineColor(sf::Color(0, 0, 175, 255));
		}
		else
		{
			circle.setFillColor(sf::Color(255, 255, 0, 255));
			circle.setOutlineColor(sf::Color(175, 175, 0, 255));

			if (s == 'f' || s == 't')
				symbText.setStyle(sf::Text::Italic);
			else
				symbText.setStyle(sf::Text::Bold);
		}

		circle.setOrigin(20.0, 20.0);
		circle.setPosition(pos);

		symbText.setOrigin(symbText.getGlobalBounds().width / 2.0, symbText.getGlobalBounds().height / 2.0 + 8.0);
		symbText.setPosition(pos);
	}

	void setPosition(const sf::Vector2f pos)
	{
		circle.setPosition(pos);
		symbText.setPosition(pos);
	}

	void draw(sf::RenderWindow &window)
	{
		window.draw(circle);
		window.draw(symbText);
	}
} node[1000];

void getTreeDepth(int pos, int currentD, int &maxD)
{
	if (currentD > maxD)
		maxD = currentD;

	if (node[pos].symbol == '!')
		getTreeDepth(node[pos].leaf1, currentD + 1, maxD);
	else if (node[pos].symbol == '^' || node[pos].symbol == 'v' || node[pos].symbol == '>' || node[pos].symbol == '=')
	{
		getTreeDepth(node[pos].leaf1, currentD + 1, maxD);
		getTreeDepth(node[pos].leaf2, currentD + 1, maxD);
	}
}

void recSetPos(int pos, int x, int y)
{
	node[pos].setPosition(sf::Vector2f(x * unit.x, y * unit.y));
	if (node[pos].symbol == '!')
	{
		int depth = 0;
		getTreeDepth(pos, 0, depth);
		recSetPos(node[pos].leaf1, x - depth - 1, y + depth + 1);
	}
	else if (node[pos].symbol == '^' || node[pos].symbol == 'v' || node[pos].symbol == '>' || node[pos].symbol == '=')
	{
		int depth = 0;
		getTreeDepth(pos, 0, depth);

		recSetPos(node[pos].leaf1, x - depth - 1, y + depth + 1);
		recSetPos(node[pos].leaf2, x + depth + 1, y + depth + 1);
	}
}

int buildTree(char input[])
{
	int i = 0, nodes = 0;
	int leaf1 = -1, leaf2 = -1;
	char curSym = 0;

	while (input[i])
	{
		while (input[i] == ' ') i++; //ignore spaces


		if (input[i] >= 'A' && input[i] <= 'Z' || input[i] == '!' || input[i] == '^' || input[i] == 'v' || input[i] == '>' || input[i] == '=' || input[i] == 'f' || input[i] == 't')
		{
			if (curSym != 0)
				node[nodes++].contsruct(curSym, leaf1, leaf2, sf::Vector2f(0.0, 0.0));
			curSym = input[i];
			leaf1 = -1;
			leaf2 = -1;
		}
		else if (input[i] == '[')
		{
			if (leaf1 == -1)
			{ //get leaf 1
				i++;
				while (input[i] && input[i] != ']')
				{
					if (input[i] >= '0' && input[i] <= '9')
					{
						if (leaf1 == -1)
							leaf1 = input[i] - '0';
						else
							leaf1 = input[i] - '0' + leaf1 * 10;
					}
					i++;
				}
			}
			else
			{ //get leaf 2
				i++;
				while (input[i] && input[i] != ']')
				{
					if (input[i] >= '0' && input[i] <= '9')
					{
						if (leaf2 == -1)
							leaf2 = input[i] - '0';
						else
							leaf2 = input[i] - '0' + leaf2 * 10;
					}
					i++;
				}
			}
		}
		i++;
	}
	if (curSym != 0)
		node[nodes++].contsruct(curSym, leaf1, leaf2, sf::Vector2f(0.0, 0.0));
	return nodes;
}

int main(int argc, char **argv)
{
	if (argc == 0)
		return 0;
	//get font address
	if (!font.loadFromFile("font.ttf"))
	{
		if (!GetWindowsDirectoryA(fontAds, 256) || font.loadFromFile(std::string(fontAds) + "\\Fonts\\arial.ttf"))
		{
			std::cout << "An error occured while loading the default font.\nCopying any TrueType font into the working directory of the calling program under the name 'font.ttf' will bypass the default font setting.\n";
			getchar();
			return 0;
		}
	}
	int nodes = buildTree(argv[argc - 1]);
	if (nodes == 0) //wrong input
	{
		std::cout << "The tree given was empty or ill-defined.\n";
		getchar();
		return 0;
	}

	ShowWindow(::GetConsoleWindow(), SW_HIDE);

	//calculate positions
	recSetPos(0, 20, 5);

	sf::RenderWindow window(sf::VideoMode(800, 800), "Tree", sf::Style::Close);
	window.setFramerateLimit(30);

	sf::Vertex line[2];

	while (window.isOpen())
	{
		sf::Event event;
		while (window.pollEvent(event))
		{
			if (event.type == sf::Event::Closed)
				window.close();
			else if (event.type == sf::Event::KeyPressed)
			{
				if (event.key.code == sf::Keyboard::Up)
				{
					for (int i = 0; i < nodes; i++)
						node[i].setPosition(sf::Vector2f(node[i].circle.getPosition().x, node[i].circle.getPosition().y - unit.y));
				}
				else if (event.key.code == sf::Keyboard::Down)
				{
					for (int i = 0; i < nodes; i++)
						node[i].setPosition(sf::Vector2f(node[i].circle.getPosition().x, node[i].circle.getPosition().y + unit.y));
				}
				else if (event.key.code == sf::Keyboard::Left)
				{
					for (int i = 0; i < nodes; i++)
						node[i].setPosition(sf::Vector2f(node[i].circle.getPosition().x - unit.x, node[i].circle.getPosition().y));
				}
				else if (event.key.code == sf::Keyboard::Right)
				{
					for (int i = 0; i < nodes; i++)
						node[i].setPosition(sf::Vector2f(node[i].circle.getPosition().x + unit.x, node[i].circle.getPosition().y));
				}
				
			}
		}

		window.clear();
		for (int i = 0; i < nodes; i++)
		{
			if (node[i].leaf1 != -1)
			{
				line[0].position = node[i].circle.getPosition();
				line[1].position = node[node[i].leaf1].circle.getPosition();
				window.draw(line, 2, sf::Lines);
			}
			if (node[i].leaf2 != -1)
			{
				line[0].position = node[i].circle.getPosition();
				line[1].position = node[node[i].leaf2].circle.getPosition();
				window.draw(line, 2, sf::Lines);
			}
			node[i].draw(window);
		}
		window.display();
	}

	return 1;
}
